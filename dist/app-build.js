"bundle";!function(){var a=System.amdDefine;a("app.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><require from="nav-bar.html"></require><require from="bootstrap/css/bootstrap.css"></require><require from="./introduction"></require><require from="./basics"></require><require from="./filter"></require><require from="./sort"></require><nav-bar></nav-bar><div class="page-host"><introduction></introduction><div class="container"><basics></basics><filter></filter><sort></sort><div class="text-center"><hr><p>Hector Romero, 2016 under the MIT License</p></div></div></div></template>'})}(),System.register("app.js",[],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d;return{setters:[],execute:function(){a("App",d=function a(){c(this,a)}),a("App",d)}}}),function(){var a=System.amdDefine;a("basics.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><div class="page-header" id="basics"><h1>The Basics</h1></div><p>One of the goals for Aurelia Table is for it to be easy to use. Because of this we start with the normal html table markup and then we build on top of it. This will allow you to easily customize your tables with CSS. For this examples we have chosen to use Bootstrap and Font Awesome but you can use whatever your heart desires.</p><p>Here is the code for the simplest table you can create:</p><ul class="nav nav-tabs" role="tablist"><li role="presentation" class.bind="selected === \'html\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'html\'">HTML</a></li><li role="presentation" class.bind="selected === \'js\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'js\'">JS</a></li><li role="presentation" class.bind="selected === \'preview\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'preview\'">Preview</a></li></ul><div role="tabpanel" class="tab-pane" show.bind="selected === \'html\'"><pre><code class="language-markup" au-syntax>&lt;template>\n    &lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData">\n        &lt;thead>\n        &lt;tr>\n            &lt;th>Name&lt;/th>\n            &lt;th>Age&lt;/th>\n            &lt;th>E-mail&lt;/th>\n            &lt;th>Address&lt;/th>\n        &lt;/tr>\n        &lt;/thead>\n        &lt;tbody>\n        &lt;tr repeat.for="user of $displayData">\n            &lt;td>${open}user.name}&lt;/td>\n            &lt;td>${open}user.age}&lt;/td>\n            &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n            &lt;td>${open}user.address}&lt;/td>\n        &lt;/tr>\n        &lt;/tbody>\n    &lt;/table>\n&lt;/template></code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'js\'"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n    }\n}</code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'preview\'"><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData"><thead><tr><th>Name</th><th>Age</th><th>E-mail</th><th>Address</th></tr></thead><tbody><tr repeat.for="user of $displayData"><td>${user.name}</td><td>${user.age}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.address}</td></tr></tbody></table></div><p>The <code>aurelia-table</code> custom attribute takes in a list of bindable properties:<ul><li><code>data</code>: You need to bind this to the array in your view-model that holds the original data for your table. Aurelia Table will observe this array for changes, so you can load your data asynchronously and the table will update itself when the data becomes available.</li><li><code>display-data</code>: Aurelia Table will make a copy of the array provided in the <code>data</code> property and will set into this property. The property you are binding here doesn\'t need to be declared or initialized in your view-model, just make sure you provide a unique property name that is not used anywhere else outside the table.</li></ul>The other noteworthy code is the repeater: <code>repeat.for="user of $displayData"</code>. You want to repeat over whatever property you used for the <code>display-data</code> property; in this case it was <code>$displayData</code>.</p><p>All right, this is the simplest table you can create, but right now Aurelia Table is effectively doing nothing. Keep reading to discover how easy it is to add functionality with plugins.</p></template>'})}(),System.register("basics.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("BasicsCustomElement",e=function(){function a(){c(this,a),this.open="${",this.selected="html",this.users=[]}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b.slice(1,10)})},a}()),a("BasicsCustomElement",e)}}}),function(){var a=System.amdDefine;a("filter.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><div class="page-header" id="filter"><h1>Filter Data</h1></div><p>To activate the filter plugin you just need to tell Aurelia Table what text property to observe and the columns you want to filter. You will normally have a text input that updates the filter text, when the text changes the table gets updated.</p><p>There are two properties you need for filtering:<ul><li><code>filter-text</code>: Bind the property that holds the filter text.</li><li><code>filter-keys</code>: Provide an array that specifies the columns you want to filter for. Aurelia Table will look for matches in the columns you specify.</li></ul></p><h3>Example</h3><ul class="nav nav-tabs" role="tablist"><li role="presentation" class.bind="selected === \'html\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'html\'">HTML</a></li><li role="presentation" class.bind="selected === \'js\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'js\'">JS</a></li><li role="presentation" class.bind="selected === \'preview\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'preview\'">Preview</a></li></ul><div role="tabpanel" class="tab-pane" show.bind="selected === \'html\'"><pre><code class="language-markup" au-syntax>&lt;input type="text" value.bind="filterText" placeholder="Enter filter text" class="form-control"/>\n\n&lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData;\n                                         filter-text.bind: filterText; filter-keys.bind: [\'name\', \'address\']">\n    &lt;thead>\n    &lt;tr>\n        &lt;th>Name&lt;/th>\n        &lt;th>Age&lt;/th>\n        &lt;th>E-mail&lt;/th>\n        &lt;th>Address&lt;/th>\n    &lt;/tr>\n    &lt;/thead>\n    &lt;tbody>\n    &lt;tr repeat.for="user of $displayData">\n        &lt;td>${open}user.name}&lt;/td>\n        &lt;td>${open}user.age}&lt;/td>\n        &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n        &lt;td>${open}user.address}&lt;/td>\n    &lt;/tr>\n    &lt;/tbody>\n&lt;/table></code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'js\'"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n    }\n}</code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'preview\'"><br><input type="text" value.bind="filterText" placeholder="Enter filter text" class="form-control"><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData;\n                                                      filter-text.bind: filterText; filter-keys.bind: [\'name\', \'address\']"><thead><tr><th>Name</th><th>Age</th><th>E-mail</th><th>Address</th></tr></thead><tbody><tr repeat.for="user of $displayData"><td>${user.name}</td><td>${user.age}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.address}</td></tr></tbody></table></div><p>First we are setting the filter text: <code>filter-text.bind: filterText</code>. Note how we are using the same property in the text input: <code>&lt;input type="text" value.bind="filterText"/></code>. So whenever the value of the text input changes the table gets filtered.</p><p>Also with the property <code>filter-keys.bind: [\'name\', \'address\']</code> we are specifying that we only want to filter by the name and the address columns.</p><p>As you can see adding an external filter to our table is very simple. And this approach is very flexible since you are not limited to a text input for the filter text; you could easily use a dropdown to update your filter text.</p></template>'})}(),System.register("filter.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("FilterCustomElement",e=function(){function a(){c(this,a),this.open="${",this.selected="html",this.users=[]}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b.slice(1,10)})},a}()),a("FilterCustomElement",e)}}}),function(){var a=System.amdDefine;a("introduction.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><div class="page-banner"><h1 class="project-name">Aurelia Table</h1><h2 class="project-tagline">Simple functional data table</h2><a href="https://github.com/tochoromero/aurelia-table" class="btn">View on GitHub</a> <a href="https://github.com/tochoromero/aurelia-table/zipball/master" class="btn">Download .zip</a> <a href="https://github.com/tochoromero/aurelia-table/tarball/master" class="btn">Download .tar.gz</a></div><div class="container"><div class="row" id="introduction"><div class="col-md-12"><div class="page-header"><h1>Introduction</h1></div><p>Aurelia Table was created out of the need for a simple highly customizable data table plugin that could take advantage of Aurelia\'s data binding. It has no dependencies but Aurelia itself and because it uses the standard HTML table it is compatible with CSS Frameworks such as Bootstrap and Foundation.</p><p>Out of the box you will get plugins for row searching, column sorting, client side pagination and row selection. But if you require very complex tables, high performance with big volumes of data or you don\'t care about data binding you may want to take a look at <a href="https://www.ag-grid.com/">Ag-Grid</a>, it has a web component mode that can be used with Aurelia.</p><p>Also a big shout to the team behind <a href="http://lorenzofox3.github.io/smart-table-website/" target="_blank">Smart-Table</a>, Aurelia Table was inspired by this library. If you are ever in need for a good table library for Angular please take a look at this library.</p><div class="page-header" id="installation"><h1>Installation</h1></div><p>You can install the plugin directly from its Github repository using either:<pre>npm install https://github.com/tochoromero/aurelia-table</pre></p><p>or</p><pre>jspm install github:tochoromero/aurelia-table -y</pre><p></p><p>Once the plugin is installed we need to indicate Aurelia to use it. To do this find your <code>main.js</code> file and add the plugin:<pre><code class="language-js" au-syntax>export function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging()\n    .plugin(\'tochoromero/aurelia-table\');\n\n  aurelia.start().then(() => aurelia.setRoot());\n}</code></pre></p><p>And that is it, you are ready to use the plugin.</p></div></div></div></template>'})}(),System.register("introduction.js",[],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d;return{setters:[],execute:function(){a("IntroductionCustomElement",d=function a(){c(this,a)}),a("IntroductionCustomElement",d)}}}),System.register("main.js",["bootstrap"],function(a,b){"use strict";function c(a){a.use.standardConfiguration().developmentLogging().plugin("aurelia-syntax-highlighter").plugin("tochoromero/aurelia-table"),a.start().then(function(){return a.setRoot()})}return a("configure",c),{setters:[function(a){}],execute:function(){}}}),function(){var a=System.amdDefine;a("nav-bar.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template bindable="router"><nav class="navbar navbar-default navbar-fixed-top" role="navigation"><div class="navbar-header"><a class="navbar-brand" href="#"><span>Aurelia Table</span></a></div><ul class="nav navbar-nav"><li><a href="#introduction">Introduction</a></li><li><a href="#installation">Installation</a></li><li><a href="#basics">The Basics</a></li><li><a href="#filter">Filter Data</a></li><li><a href="#sort">Sorting</a></li></ul></nav></template>'})}(),function(){var a=System.amdDefine;a("sort.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><div class="page-header" id="sort"><h1>Column Sorting</h1></div><p>The <code>aut-sort</code> attribute when added to a <code>th</code> element, enables sorting for that column. It takes 2 properties:<ul><li><code>key</code>: This is just a string with the name of the column it will sort by, you will want to match this to the actual column you are adding it to. This property is required.</li><li><code>default</code>: You should provide this for the one column you want to be sorted by default. The possible values are: <code>asc</code> for ascending ordering and <code>desc</code> for descending order.</li></ul></p><p>There is also the option to use a getter function in the <code>key</code> property. When using a function it will be called once per each row and it will receive the row object, it then should return the value to sort by. A common example of this would be a function that returns the length of one property, so then the column will be sorted by length.</p><p></p><h3>Styling</h3><p>There are 4 CSS classes for <code>th</code> elements with sorting enabled:<ul><li><code>aut-sort</code>: This class is always present, its purpose is to provide a constant CSS class for the columns with sorting.</li><li><code>aut-sortable</code>: This class indicates the column can be sorted and it is present when the column is not currently sorted.</li><li><code>aut-asc</code>: This class indicates the column is being sorted by an ascending order.</li><li><code>aut-desc</code>: This class indicates the column is being sorted by a descending order.</li></ul></p><p>You will need to provide the styles for this classes. In this example we are leveraging Font Awesome to show the appropriate icons.</p><h3>Example</h3><ul class="nav nav-tabs" role="tablist"><li role="presentation" class.bind="selected === \'html\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'html\'">HTML</a></li><li role="presentation" class.bind="selected === \'css\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'css\'">CSS</a></li><li role="presentation" class.bind="selected === \'js\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'js\'">JS</a></li><li role="presentation" class.bind="selected === \'preview\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'preview\'">Preview</a></li></ul><div role="tabpanel" class="tab-pane" show.bind="selected === \'html\'"><pre><code class="language-markup" au-syntax>&lt;template>\n    &lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData">\n        &lt;thead>\n        &lt;tr>\n            &lt;th aut-sort="key.bind: nameLength">Name&lt;/th>\n            &lt;th aut-sort="key: age; default: desc">Age&lt;/th>\n            &lt;th>E-mail&lt;/th>\n            &lt;th aut-sort="key: address">Address&lt;/th>\n        &lt;/tr>\n        &lt;/thead>\n        &lt;tbody>\n        &lt;tr repeat.for="user of $displayData">\n            &lt;td>${open}user.name}&lt;/td>\n            &lt;td>${open}user.age}&lt;/td>\n            &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n            &lt;td>${open}user.address}&lt;/td>\n        &lt;/tr>\n        &lt;/tbody>\n    &lt;/table>\n&lt;/template></code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'css\'"><pre><code class="language-css" au-syntax>.aut-sort:before{\n    font-family: FontAwesome;\n    padding-right: 0.5em;\n    width: 1.28571429em;\n    display: inline-block;\n    text-align: center;\n}\n\n.aut-sortable:before{\n    content: "\\f0dc";\n}\n\n.aut-asc:before{\n    content: "\\f160";\n}\n\n.aut-desc:before{\n    content: "\\f161";\n}</code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'js\'"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n    }\n\n    nameLength(row) {\n        return row.name.length;\n    }\n}</code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'preview\'"><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData"><thead><tr><th aut-sort="key.bind: nameLength">Name</th><th aut-sort="key: age; default: desc">Age</th><th>E-mail</th><th aut-sort="key: address">Address</th></tr></thead><tbody><tr repeat.for="user of $displayData"><td>${user.name}</td><td>${user.age}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.address}</td></tr></tbody></table></div><p>Note how the name column is being sorted by its length: <code>aut-sort="key.bind: nameLength"</code>. You can see the simple <code>nameLength</code> function in the JS tab.<br>Also note the Age column is sorted by default: <code>aut-sort="key: age; default: desc"</code>.</p></template>'})}(),System.register("sort.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("SortCustomElement",e=function(){function a(){c(this,a),this.open="${",this.selected="html",this.users=[]}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b.slice(1,10)})},a.prototype.nameLength=function(a){return a.name.length},a}()),a("SortCustomElement",e)}}});