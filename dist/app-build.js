"bundle";!function(){var a=System.amdDefine;a("api.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><div class="page-header" id="api"><h1>Api</h1></div><p>Though you can have access to many of the internals of the <code>aut-table</code> plugin through data binding, there are some instances when it is not enough. For those instances we are exposing an Api that will give you access to extra functionality.</p><p>To get a hold of the api you need to bind the <code>api</code> property, the <code>aut-table</code> will set its api into it. Right now the api contains:<ul><li><code>revealItem(item):boolean</code>: When pagination is enabled, this function will allow you to reveal the page where the provided <code>item</code> is.<br>You will get back a boolean, where <code>true</code> indicates the item was revealed correctly and <code>false</code> indicates one of three things:<ol><li>The provided item does not exist in the table.</li><li>The provided item exists but it is not visible because of a filter. On which case you can clear the filter and try again.</li><li>Pagination is not enabled.</li></ol></li></ul></p><h3>Example</h3><ul class="nav nav-tabs" role="tablist"><li role="presentation" class.bind="selected === \'html\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'html\'">HTML</a></li><li role="presentation" class.bind="selected === \'js\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'js\'">JS</a></li><li role="presentation" class.bind="selected === \'preview\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'preview\'">Preview</a></li></ul><div role="tabpanel" class="tab-pane" show.bind="selected === \'html\'"><pre><code class="language-markup" au-syntax>&lt;template>\n    &lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData;\n                                              current-page.bind: currentPage; page-size.bind: pageSize; total-items.bind: totalItems;\n                                              api.bind: tableApi;">\n            &lt;thead>\n            &lt;tr>\n                &lt;th>Name&lt;/th>\n                &lt;th>Age&lt;/th>\n                &lt;th>E-mail&lt;/th>\n                &lt;th>Address&lt;/th>\n            &lt;/tr>\n            &lt;/thead>\n            &lt;tbody>\n            &lt;tr repeat.for="user of $displayData" aut-select="row.bind: user; selected-class: info">\n                &lt;td>${open}user.name}&lt;/td>\n                &lt;td>${open}user.age}&lt;/td>\n                &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n                &lt;td>${open}user.address}&lt;/td>\n            &lt;/tr>\n            &lt;/tbody>\n        &lt;/table>\n\n        &lt;div class="row">\n            &lt;div class="col-md-9">\n                &lt;aut-pagination current-page.bind="currentPage" page-size.bind="pageSize" total-items.bind="totalItems">&lt;/aut-pagination>\n            &lt;/div>\n\n            &lt;div class="col-md-3 text-right">\n                &lt;button class="btn btn-default" click.delegate="selectLast()">Select Last&lt;/button>\n            &lt;/div>\n        &lt;/div>\n&lt;/template></code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'js\'"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n\n    pageSize = 10;\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n    }\n\n    selectLast(){\n        let last = this.users[this.users.length - 1];\n        last.$isSelected = true;\n        this.tableApi.revealItem(last);\n    }\n}</code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'preview\'"><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData;\n                                              current-page.bind: currentPage; page-size.bind: pageSize; total-items.bind: totalItems;\n                                              api.bind: tableApi;"><thead><tr><th>Name</th><th>Age</th><th>E-mail</th><th>Address</th></tr></thead><tbody><tr repeat.for="user of $displayData" aut-select="row.bind: user; selected-class: info"><td>${user.name}</td><td>${user.age}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.address}</td></tr></tbody></table><div class="row"><div class="col-md-9"><aut-pagination current-page.bind="currentPage" page-size.bind="pageSize" total-items.bind="totalItems"></aut-pagination></div><div class="col-md-3 text-right"><button class="btn btn-default" click.delegate="selectLast()">Select Last</button></div></div></div></template>'})}(),System.register("api.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("ApiCustomElement",e=function(){function a(){c(this,a),this.open="${",this.selected="html",this.users=[],this.pageSize=10}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b})},a.prototype.selectLast=function(){var a=this.users[this.users.length-1];a.$isSelected=!0,this.tableApi.revealItem(a)},a}()),a("ApiCustomElement",e)}}}),function(){var a=System.amdDefine;a("app.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><require from="nav-bar.html"></require><require from="bootstrap/css/bootstrap.css"></require><require from="./introduction"></require><require from="./basics"></require><require from="./filter"></require><require from="./sort"></require><require from="./pagination"></require><require from="./selection"></require><require from="./api"></require><nav-bar></nav-bar><div class="page-host"><introduction></introduction><div class="container"><basics></basics><filter></filter><sort></sort><pagination></pagination><selection></selection><api></api><div class="text-center"><hr><p>Hector Romero, 2016 under the MIT License</p></div></div></div></template>'})}(),System.register("app.js",[],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d;return{setters:[],execute:function(){a("App",d=function a(){c(this,a)}),a("App",d)}}}),function(){var a=System.amdDefine;a("basics.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><div class="page-header" id="basics"><h1>The Basics</h1></div><p>One of the goals for Aurelia Table is for it to be easy to use. Because of this we start with the normal html table markup and then we build on top of it. This will allow you to easily customize your tables with CSS. For this examples we have chosen to use Bootstrap and Font Awesome but you can use whatever your heart desires.</p><p>Here is the code for the simplest table you can create:</p><ul class="nav nav-tabs" role="tablist"><li role="presentation" class.bind="selected === \'html\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'html\'">HTML</a></li><li role="presentation" class.bind="selected === \'js\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'js\'">JS</a></li><li role="presentation" class.bind="selected === \'preview\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'preview\'">Preview</a></li></ul><div role="tabpanel" class="tab-pane" show.bind="selected === \'html\'"><pre><code class="language-markup" au-syntax>&lt;template>\n    &lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData">\n        &lt;thead>\n        &lt;tr>\n            &lt;th>Name&lt;/th>\n            &lt;th>Age&lt;/th>\n            &lt;th>E-mail&lt;/th>\n            &lt;th>Address&lt;/th>\n        &lt;/tr>\n        &lt;/thead>\n        &lt;tbody>\n        &lt;tr repeat.for="user of $displayData">\n            &lt;td>${open}user.name}&lt;/td>\n            &lt;td>${open}user.age}&lt;/td>\n            &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n            &lt;td>${open}user.address}&lt;/td>\n        &lt;/tr>\n        &lt;/tbody>\n    &lt;/table>\n&lt;/template></code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'js\'"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n    }\n}</code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'preview\'"><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData"><thead><tr><th>Name</th><th>Age</th><th>E-mail</th><th>Address</th></tr></thead><tbody><tr repeat.for="user of $displayData"><td>${user.name}</td><td>${user.age}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.address}</td></tr></tbody></table></div><p>The <code>aurelia-table</code> custom attribute takes in a list of bindable properties:<ul><li><code>data</code>: You need to bind this to the array in your view-model that holds the original data for your table. Aurelia Table will observe this array for changes, so you can load your data asynchronously and the table will update itself when the data becomes available.</li><li><code>display-data</code>: Aurelia Table will make a copy of the array provided in the <code>data</code> property and will set into this property. The property you are binding here doesn\'t need to be declared or initialized in your view-model, just make sure you provide a unique property name that is not used anywhere else outside the table.</li></ul>The other noteworthy code is the repeater: <code>repeat.for="user of $displayData"</code>. You want to repeat over whatever property you used for the <code>display-data</code> property; in this case it was <code>$displayData</code>.</p><p>All right, this is the simplest table you can create, but right now Aurelia Table is effectively doing nothing. Keep reading to discover how easy it is to add functionality with plugins.</p></template>'})}(),System.register("basics.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("BasicsCustomElement",e=function(){function a(){c(this,a),this.open="${",this.selected="html",this.users=[]}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b.slice(1,10)})},a}()),a("BasicsCustomElement",e)}}}),function(){var a=System.amdDefine;a("customPagination.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><h2 id="custom-pagination">Custom Pagination</h2><p>If you don\'t want a dependency in Bootstrap or you simply want a different layout for the pagination, you can replace the <code>aut-pagination</code> template with your own. This is achieved through Aurelia\'s <code>replace-part</code> capabilities. Of course you can always forget about the <code>aut-pagination</code> component all together and write your own, but we provide you a couple of properties and methods that will make it easier:<ul><li><code>totalPages</code>: Besides the properties you bind into the component, you have access to this property. This property is calculated out of the <code>total-items</code> and <code>page-size</code> properties. And it will updated any time any of them changes.</li><li><code>selectPage(page)</code>: This function will select the page number you provide. You want to call this when your user select one page in your paginator.</li><li><code>nextPage()</code>: This function will select the next page if available.</li><li><code>previousPage()</code>: This function will select the previous page if available.</li></ul></p><h3>Example</h3><ul class="nav nav-tabs" role="tablist"><li role="presentation" class.bind="selected === \'html\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'html\'">HTML</a></li><li role="presentation" class.bind="selected === \'css\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'css\'">CSS</a></li><li role="presentation" class.bind="selected === \'js\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'js\'">JS</a></li><li role="presentation" class.bind="selected === \'preview\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'preview\'">Preview</a></li></ul><div role="tabpanel" class="tab-pane" show.bind="selected === \'html\'"><pre><code class="language-markup" au-syntax>&lt;template>\n    &lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData;\n                                              current-page.bind: currentPage; page-size.bind: pageSize; total-items.bind: totalItems;">\n        &lt;thead>\n        &lt;tr>\n            &lt;th>Name&lt;/th>\n            &lt;th>Age&lt;/th>\n            &lt;th>E-mail&lt;/th>\n            &lt;th>Address&lt;/th>\n        &lt;/tr>\n        &lt;/thead>\n        &lt;tbody>\n        &lt;tr repeat.for="user of $displayData">\n            &lt;td>${open}user.name}&lt;/td>\n            &lt;td>${open}user.age}&lt;/td>\n            &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n            &lt;td>${open}user.address}&lt;/td>\n        &lt;/tr>\n        &lt;/tbody>\n    &lt;/table>\n                \n    &lt;aut-pagination current-page.bind="currentPage" page-size.bind="pageSize" total-items.bind="totalItems">\n        &lt;template replace-part="pagination">\n            &lt;ul class="custom-pagination" hide.bind="hideSinglePage && totalPages === 1">\n                &lt;li>\n                  &lt;a aria-label="Previous" click.delegate="previousPage()" class-name.bind="currentPage === 1 ? \'disabled\' : \'\'">\n                    &lt;span aria-hidden="true">&laquo;&lt;/span>\n                  &lt;/a>\n                &lt;/li>\n\n                &lt;li repeat.for="i of totalPages">\n                  &lt;a click.delegate="selectPage(i+1)" class-name.bind="currentPage === (i + 1) ? \'active\' : \'\'">\n                    ${open}i + 1}\n                  &lt;/a>\n                &lt;/li>\n\n                &lt;li>\n                  &lt;a aria-label="Next" click.delegate="nextPage()" class-name.bind="currentPage === totalPages ? \'disabled\' : \'\'">\n                    &lt;span aria-hidden="true">&raquo;&lt;/span>\n                  &lt;/a>\n                &lt;/li>\n            &lt;/ul>\n        &lt;/template>\n    &lt;/aut-pagination>\n\n&lt;/template></code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'css\'"><pre><code class="language-css" au-syntax>.ul.custom-pagination {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\nul.custom-pagination li {display: inline;}\n\nul.custom-pagination li a {\n  color: black;\n  float: left;\n  padding: 8px 16px;\n  text-decoration: none;\n  transition: background-color .3s;\n}\n\nul.custom-pagination li a.active {\n  background-color: #4CAF50;\n  color: white;\n}\n\nul.custom-pagination li a:hover:not(.active):not(.disabled) {background-color: #ddd;}\n\nul.custom-pagination li a.disabled {\n  color: darkgrey;\n}</code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'js\'"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n\n    pageSize = 10;\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n    }\n}</code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'preview\'"><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData;\n                                              current-page.bind: currentPage; page-size.bind: pageSize; total-items.bind: totalItems;"><thead><tr><th>Name</th><th>Age</th><th>E-mail</th><th>Address</th></tr></thead><tbody><tr repeat.for="user of $displayData"><td>${user.name}</td><td>${user.age}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.address}</td></tr></tbody></table><div class="row"><aut-pagination current-page.bind="currentPage" page-size.bind="pageSize" total-items.bind="totalItems"><template replace-part="pagination"><ul class="custom-pagination" hide.bind="hideSinglePage && totalPages === 1"><li><a aria-label="Previous" click.delegate="previousPage()" class-name.bind="currentPage === 1 ? \'disabled\' : \'\'"><span aria-hidden="true">&laquo;</span></a></li><li repeat.for="i of totalPages"><a click.delegate="selectPage(i+1)" class-name.bind="currentPage === (i + 1) ? \'active\' : \'\'">${i + 1}</a></li><li><a aria-label="Next" click.delegate="nextPage()" class-name.bind="currentPage === totalPages ? \'disabled\' : \'\'"><span aria-hidden="true">&raquo;</span></a></li></ul></template></aut-pagination></div></div></template>'})}(),System.register("customPagination.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("CustomPaginationCustomElement",e=function(){function a(){c(this,a),this.open="${",this.selected="html",this.users=[],this.pageSize=10}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b})},a}()),a("CustomPaginationCustomElement",e)}}}),function(){var a=System.amdDefine;a("filter.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><div class="page-header" id="filter"><h1>Filter Data</h1></div><p>To activate the filter plugin you just need to tell Aurelia Table what text property to observe and the columns you want to filter. You will normally have a text input that updates the filter text, when the text changes the table gets updated.</p><p>There are two properties you need for filtering:<ul><li><code>filter-text</code>: Bind the property that holds the filter text.</li><li><code>filter-keys</code>: Provide an array that specifies the columns you want to filter for. Aurelia Table will look for matches in the columns you specify.</li></ul></p><h3>Example</h3><ul class="nav nav-tabs" role="tablist"><li role="presentation" class.bind="selected === \'html\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'html\'">HTML</a></li><li role="presentation" class.bind="selected === \'js\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'js\'">JS</a></li><li role="presentation" class.bind="selected === \'preview\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'preview\'">Preview</a></li></ul><div role="tabpanel" class="tab-pane" show.bind="selected === \'html\'"><pre><code class="language-markup" au-syntax>&lt;input type="text" value.bind="filterText" placeholder="Enter filter text" class="form-control"/>\n\n&lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData;\n                                         filter-text.bind: filterText; filter-keys.bind: [\'name\', \'address\']">\n    &lt;thead>\n    &lt;tr>\n        &lt;th>Name&lt;/th>\n        &lt;th>Age&lt;/th>\n        &lt;th>E-mail&lt;/th>\n        &lt;th>Address&lt;/th>\n    &lt;/tr>\n    &lt;/thead>\n    &lt;tbody>\n    &lt;tr repeat.for="user of $displayData">\n        &lt;td>${open}user.name}&lt;/td>\n        &lt;td>${open}user.age}&lt;/td>\n        &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n        &lt;td>${open}user.address}&lt;/td>\n    &lt;/tr>\n    &lt;/tbody>\n&lt;/table></code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'js\'"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n    }\n}</code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'preview\'"><br><input type="text" value.bind="filterText" placeholder="Enter filter text" class="form-control"><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData;\n                                                      filter-text.bind: filterText; filter-keys.bind: [\'name\', \'address\']"><thead><tr><th>Name</th><th>Age</th><th>E-mail</th><th>Address</th></tr></thead><tbody><tr repeat.for="user of $displayData"><td>${user.name}</td><td>${user.age}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.address}</td></tr></tbody></table></div><p>First we are setting the filter text: <code>filter-text.bind: filterText</code>. Note how we are using the same property in the text input: <code>&lt;input type="text" value.bind="filterText"/></code>. So whenever the value of the text input changes the table gets filtered.</p><p>Also with the property <code>filter-keys.bind: [\'name\', \'address\']</code> we are specifying that we only want to filter by the name and the address columns.</p><p>As you can see adding an external filter to our table is very simple. And this approach is very flexible since you are not limited to a text input for the filter text; you could easily use a dropdown to update your filter text.</p></template>'})}(),System.register("filter.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("FilterCustomElement",e=function(){function a(){c(this,a),this.open="${",this.selected="html",this.users=[]}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b.slice(1,10)})},a}()),a("FilterCustomElement",e)}}}),function(){var a=System.amdDefine;a("introduction.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><div class="page-banner"><h1 class="project-name">Aurelia Table</h1><h2 class="project-tagline">Simple functional data table</h2><a href="https://github.com/tochoromero/aurelia-table" class="btn">View on GitHub</a> <a href="https://github.com/tochoromero/aurelia-table/zipball/master" class="btn">Download .zip</a> <a href="https://github.com/tochoromero/aurelia-table/tarball/master" class="btn">Download .tar.gz</a></div><div class="container"><div class="row" id="introduction"><div class="col-md-12"><div class="page-header"><h1>Introduction</h1></div><p>Aurelia Table was created out of the need for a simple highly customizable data table plugin that could take advantage of Aurelia\'s data binding. It has no dependencies but Aurelia itself and because it uses the standard HTML table it is compatible with CSS Frameworks such as Bootstrap and Foundation.</p><p>Out of the box you will get plugins for row searching, column sorting, client side pagination and row selection. But if you require very complex tables, high performance with big volumes of data or you don\'t care about data binding you may want to take a look at <a href="https://www.ag-grid.com/">Ag-Grid</a>, it has a web component mode that can be used with Aurelia.</p><p>Also a big shout to the team behind <a href="http://lorenzofox3.github.io/smart-table-website/" target="_blank">Smart-Table</a>, Aurelia Table was inspired by this library. If you are ever in need for a good table library for Angular please take a look at this library.</p><div class="page-header" id="installation"><h1>Installation</h1></div><p>You can install the plugin directly from its Github repository with jspm:<pre>jspm install github:tochoromero/aurelia-table -y</pre></p><p>Once the plugin is installed we need to indicate Aurelia to use it. To do this find your <code>main.js</code> file and add the plugin:<pre><code class="language-js" au-syntax>export function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging()\n    .plugin(\'tochoromero/aurelia-table\');\n\n  aurelia.start().then(() => aurelia.setRoot());\n}</code></pre></p><p>And that is it, you are ready to use the plugin.</p></div></div></div></template>'})}(),System.register("introduction.js",[],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d;return{setters:[],execute:function(){a("IntroductionCustomElement",d=function a(){c(this,a)}),a("IntroductionCustomElement",d)}}}),System.register("main.js",["bootstrap","jquery","fetch"],function(a,b){"use strict";function c(a){a.use.standardConfiguration().developmentLogging().plugin("aurelia-syntax-highlighter").plugin("tochoromero/aurelia-table"),a.start().then(function(){return a.setRoot()})}return a("configure",c),{setters:[function(a){},function(a){},function(a){}],execute:function(){}}}),function(){var a=System.amdDefine;a("nav-bar.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template bindable="router"><nav class="navbar navbar-default navbar-fixed-top" role="navigation"><div class="navbar-header"><a class="navbar-brand" href="#"><span>Aurelia Table</span></a></div><ul class="nav navbar-nav"><li><a href="#introduction">Introduction</a></li><li><a href="#installation">Installation</a></li><li><a href="#basics">The Basics</a></li><li><a href="#filter">Filter Data</a></li><li><a href="#sort">Sorting</a></li><li><a href="#pagination">Pagination</a></li><li><a href="#selection">Selection</a></li><li><a href="#api">Api</a></li></ul></nav></template>'})}(),function(){var a=System.amdDefine;a("pagination.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><require from="./customPagination"></require><div class="page-header" id="pagination"><h1>Pagination</h1></div><p>Aurelia Table supports client side pagination. It is very easy to enable pagination, there are 3 properties you need to provide:<ul><li><code>current-page</code>: This property specifies the page that is currently active, the index starts at 1.</li><li><code>page-size</code>: This property specifies how many items you want to display on each page.</li><li><code>total-items</code>: This property specifies the total number of items in the table.</li></ul>There is also a <code>hide-single-page</code> property. This property is <code>true</code> by default and it will hide the Pagination Component when there is only a single page. And of course you can bind this to <code>false</code> to disable the behavior.</p><p>Of the 3 properties <code>current-page</code> and <code>page-size</code> need to be manually managed outside of Aurelia Table. <code>total-items</code> will be managed by Aurelia Table based on the <code>data</code> property and any filters we may have.</p><p>As mentioned there are some properties you need to manually manage, but don\'t worry, we provide a Pagination Component that will allow you to have pagination out of the box</p><h3>Pagination Component</h3><p>The <code>aut-pagination</code> component provides a simple pagination control that will allow you to navigate the table pages. For this component you also need to provide the same 3 properties you used for the Aurelia Table: <code>current-page</code>, <code>page-size</code> and <code>total-items</code>.</p><p class="bg-info padding">The Pagination Component requires Bootstrap for its layout. If you don\'t want to have a dependency in Bootstrap you can provide your own template. Check the <a href="#custom-pagination">Custom Pagination</a> section for details.</p><h3>Example</h3><ul class="nav nav-tabs" role="tablist"><li role="presentation" class.bind="selected === \'html\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'html\'">HTML</a></li><li role="presentation" class.bind="selected === \'js\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'js\'">JS</a></li><li role="presentation" class.bind="selected === \'preview\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'preview\'">Preview</a></li></ul><div role="tabpanel" class="tab-pane" show.bind="selected === \'html\'"><pre><code class="language-markup" au-syntax>&lt;template>\n    &lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData;\n                                              current-page.bind: currentPage; page-size.bind: pageSize; total-items.bind: totalItems;">\n        &lt;thead>\n        &lt;tr>\n            &lt;th>Name&lt;/th>\n            &lt;th>Age&lt;/th>\n            &lt;th>E-mail&lt;/th>\n            &lt;th>Address&lt;/th>\n        &lt;/tr>\n        &lt;/thead>\n        &lt;tbody>\n        &lt;tr repeat.for="user of $displayData">\n            &lt;td>${open}user.name}&lt;/td>\n            &lt;td>${open}user.age}&lt;/td>\n            &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n            &lt;td>${open}user.address}&lt;/td>\n        &lt;/tr>\n        &lt;/tbody>\n    &lt;/table>\n\n    &lt;div class="row">\n        &lt;div class="col-md-9">\n            &lt;aut-pagination current-page.bind="currentPage" page-size.bind="pageSize" total-items.bind="totalItems">&lt;/aut-pagination>\n        &lt;/div>\n\n        &lt;div class="col-md-3">\n            &lt;div class="form-inline">\n                &lt;div class="form-group pull-right">\n                    &lt;label for="pageSize">Page Size: &lt;/label>\n                    &lt;select value.bind="pageSize" id="pageSize" class="form-control">\n                        &lt;option model.bind="5">5&lt;/option>\n                        &lt;option model.bind="10">10&lt;/option>\n                        &lt;option model.bind="20">20&lt;/option>\n                        &lt;option model.bind="50">50&lt;/option>\n                    &lt;/select>\n                &lt;/div>\n            &lt;/div>\n        &lt;/div>\n    &lt;/div>\n&lt;/template></code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'js\'"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n\n    pageSize = 10;\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n    }\n}</code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'preview\'"><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData;\n                                              current-page.bind: currentPage; page-size.bind: pageSize; total-items.bind: totalItems;"><thead><tr><th>Name</th><th>Age</th><th>E-mail</th><th>Address</th></tr></thead><tbody><tr repeat.for="user of $displayData"><td>${user.name}</td><td>${user.age}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.address}</td></tr></tbody></table><div class="row"><div class="col-md-9"><aut-pagination current-page.bind="currentPage" page-size.bind="pageSize" total-items.bind="totalItems"></aut-pagination></div><div class="col-md-3"><div class="form-inline"><div class="form-group pull-right"><label for="pageSize">Page Size:</label><select value.bind="pageSize" id="pageSize" class="form-control"><option model.bind="5">5</option><option model.bind="10">10</option><option model.bind="20">20</option><option model.bind="50">50</option></select></div></div></div></div></div><p>Don\'t get scared by the long markup, a big part of it is just Bootstrap layout. Note how the <code>aut-pagination</code> controller is binding the same properties we are setting into the <code>aurelia-table</code> custom attribute. We are also adding a standard dropdown to control the page size.</p><custom-pagination></custom-pagination></template>';
})}(),System.register("pagination.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("PaginationCustomElement",e=function(){function a(){c(this,a),this.open="${",this.selected="html",this.users=[],this.pageSize=10}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b})},a}()),a("PaginationCustomElement",e)}}}),function(){var a=System.amdDefine;a("selection.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><div class="page-header" id="selection"><h1>Row Selection</h1></div><p>The <code>aut-select</code> attribute, when added to the rows will make them selectable. Its properties are:<ul><li><code>row</code>: You need to bind the current row in your table repeat. This is the only required property.</li><li><code>mode</code>: This is the selection mode. If you don\'t provide it is \'single\' by default, you can also set it to multiple.</li><li><code>selected-class</code>: Specifies the css class for the selected rows. By default this is <code>aut-row-selected</code></li></ul></p><p class="bg-info padding">When you select a row, the property <code>$isSelected</code> is set to true in the row object.</p><p>There is also a <code>select</code> custom event that is triggered in the <code>tr</code> element when it gets selected. You can listen for this event if you need to perform an action when a row is selected</p><ul class="nav nav-tabs" role="tablist"><li role="presentation" class.bind="selected === \'html\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'html\'">HTML</a></li><li role="presentation" class.bind="selected === \'js\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'js\'">JS</a></li><li role="presentation" class.bind="selected === \'preview\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'preview\'">Preview</a></li></ul><div role="tabpanel" class="tab-pane" show.bind="selected === \'html\'"><pre><code class="language-markup" au-syntax>&lt;template>\n    &lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData">\n        &lt;thead>\n        &lt;tr>\n            &lt;th>Name&lt;/th>\n            &lt;th>Age&lt;/th>\n            &lt;th>E-mail&lt;/th>\n            &lt;th>Address&lt;/th>\n        &lt;/tr>\n        &lt;/thead>\n        &lt;tbody>\n        &lt;tr repeat.for="user of $displayData" aut-select="row.bind: user; mode: multiple; selected-class: info"\n                select.delegate="rowSelected($event)">\n            &lt;td>${open}user.name}&lt;/td>\n            &lt;td>${open}user.age}&lt;/td>\n            &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n            &lt;td>${open}user.address}&lt;/td>\n        &lt;/tr>\n        &lt;/tbody>\n    &lt;/table>\n&lt;/template></code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'js\'"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n    }\n\n    rowSelected($event){\n        console.log($event.detail.row);\n    }\n}</code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'preview\'"><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData"><thead><tr><th>Name</th><th>Age</th><th>E-mail</th><th>Address</th></tr></thead><tbody><tr repeat.for="user of $displayData" aut-select="row.bind: user; mode: multiple;selected-class: info" select.delegate="rowSelected($event)"><td>${user.name}</td><td>${user.age}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.address}</td></tr></tbody></table></div></template>'})}(),System.register("selection.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("SelectionCustomElement",e=function(){function a(){c(this,a),this.open="${",this.selected="html",this.users=[]}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b.slice(1,10)})},a.prototype.rowSelected=function(a){console.log(a.detail.row)},a}()),a("SelectionCustomElement",e)}}}),function(){var a=System.amdDefine;a("sort.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><div class="page-header" id="sort"><h1>Column Sorting</h1></div><p>The <code>aut-sort</code> attribute when added to a <code>th</code> element, enables sorting for that column. It takes 2 properties:<ul><li><code>key</code>: This is just a string with the name of the column it will sort by, you will want to match this to the actual column you are adding it to. This property is required.</li><li><code>default</code>: You should provide this for the one column you want to be sorted by default. The possible values are: <code>asc</code> for ascending ordering and <code>desc</code> for descending order.</li></ul></p><p>There is also the option to use a getter function in the <code>key</code> property. When using a function it will be called once per each row and it will receive the row object, it then should return the value to sort by. A common example of this would be a function that returns the length of one property, so then the column will be sorted by length.</p><p></p><h3>Styling</h3><p>There are 4 CSS classes for <code>th</code> elements with sorting enabled:<ul><li><code>aut-sort</code>: This class is always present, its purpose is to provide a constant CSS class for the columns with sorting.</li><li><code>aut-sortable</code>: This class indicates the column can be sorted and it is present when the column is not currently sorted.</li><li><code>aut-asc</code>: This class indicates the column is being sorted by an ascending order.</li><li><code>aut-desc</code>: This class indicates the column is being sorted by a descending order.</li></ul></p><p>You will need to provide the styles for this classes. In this example we are leveraging Font Awesome to show the appropriate icons.</p><h3>Example</h3><ul class="nav nav-tabs" role="tablist"><li role="presentation" class.bind="selected === \'html\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'html\'">HTML</a></li><li role="presentation" class.bind="selected === \'css\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'css\'">CSS</a></li><li role="presentation" class.bind="selected === \'js\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'js\'">JS</a></li><li role="presentation" class.bind="selected === \'preview\'? \'active\' : \'\'"><a role="tab" click.delegate="selected = \'preview\'">Preview</a></li></ul><div role="tabpanel" class="tab-pane" show.bind="selected === \'html\'"><pre><code class="language-markup" au-syntax>&lt;template>\n    &lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData">\n        &lt;thead>\n        &lt;tr>\n            &lt;th aut-sort="key.bind: nameLength">Name&lt;/th>\n            &lt;th aut-sort="key: age; default: desc">Age&lt;/th>\n            &lt;th>E-mail&lt;/th>\n            &lt;th aut-sort="key: address">Address&lt;/th>\n        &lt;/tr>\n        &lt;/thead>\n        &lt;tbody>\n        &lt;tr repeat.for="user of $displayData">\n            &lt;td>${open}user.name}&lt;/td>\n            &lt;td>${open}user.age}&lt;/td>\n            &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n            &lt;td>${open}user.address}&lt;/td>\n        &lt;/tr>\n        &lt;/tbody>\n    &lt;/table>\n&lt;/template></code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'css\'"><pre><code class="language-css" au-syntax>.aut-sort:before{\n    font-family: FontAwesome;\n    padding-right: 0.5em;\n    width: 1.28571429em;\n    display: inline-block;\n    text-align: center;\n}\n\n.aut-sortable:before{\n    content: "\\f0dc";\n}\n\n.aut-asc:before{\n    content: "\\f160";\n}\n\n.aut-desc:before{\n    content: "\\f161";\n}</code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'js\'"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n    }\n\n    nameLength(row) {\n        return row.name.length;\n    }\n}</code></pre></div><div role="tabpanel" class="tab-pane" show.bind="selected === \'preview\'"><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData"><thead><tr><th aut-sort="key.bind: nameLength">Name</th><th aut-sort="key: age; default: desc">Age</th><th>E-mail</th><th aut-sort="key: address">Address</th></tr></thead><tbody><tr repeat.for="user of $displayData"><td>${user.name}</td><td>${user.age}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.address}</td></tr></tbody></table></div><p>Note how the name column is being sorted by its length: <code>aut-sort="key.bind: nameLength"</code>. You can see the simple <code>nameLength</code> function in the JS tab.<br>Also note the Age column is sorted by default: <code>aut-sort="key: age; default: desc"</code>.</p></template>'})}(),System.register("sort.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("SortCustomElement",e=function(){function a(){c(this,a),this.open="${",this.selected="html",this.users=[]}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b.slice(1,10)})},a.prototype.nameLength=function(a){return a.name.length},a}()),a("SortCustomElement",e)}}});